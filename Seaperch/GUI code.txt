# arduino_LED_user.py
import serial
import time
# Define the serial port and baud rate.
# Ensure the 'COM#' corresponds to what was seen in the Windows Device Manager
import pygame
import time
import serial

# Define some colors.
BLACK = pygame.Color('black')
WHITE = pygame.Color('white')
# Th-is is a simple class that will help us print to the screen.
# It has nothing to do with the joysticks, just outputting the
# information.
ser = serial.Serial('COM8', 9600)
class TextPrint(object):
    def __init__(self):
        self.reset()
        self.font = pygame.font.Font(None, 20)

    def tprint(self, screen, textString):
        textBitmap = self.font.render(textString, True, BLACK)
        screen.blit(textBitmap, (self.x, self.y))
        self.y += self.line_height

    def reset(self):
        self.x = 10
        self.y = 10
        self.line_height = 15

    def indent(self):
        self.x += 10

    def unindent(self):
        self.x -= 10

#def write_read(x):
 #   arduino.write()
  #  time.sleep(0.05)
   # data = arduino.readline()
    #return data
pygame.init()

# Set the width and height of the screen (width, height).
screen = pygame.display.set_mode((500, 700))

pygame.display.set_caption("My Game")

# Loop until the user clicks the close button.
done = False

# Used to manage how fast the screen updates.
clock = pygame.time.Clock()

# Initialize the joysticks.
pygame.joystick.init()

# Get ready to print.
textPrint = TextPrint()

# -------- Main Program Loop -----------
while not done:
    #
    # EVENT PROCESSING STEP
    #
    # Possible joystick actions: JOYAXISMOTION, JOYBALLMOTION, JOYBUTTONDOWN,
    # JOYBUTTONUP, JOYHATMOTION
    for event in pygame.event.get(): # User did something.
        if event.type == pygame.QUIT: # If user clicked close.
            done = True # Flag that we are done so we exit this loop.
        elif event.type == pygame.JOYBUTTONDOWN:
            print("Joystick button pressed.")
        elif event.type == pygame.JOYBUTTONUP:
            print("Joystick button released.")

    #
    # DRAWING STEP
    #
    # First, clear the screen to white. Don't put other drawing commands
    # above this, or they will be erased with this command.
    screen.fill(WHITE)
    textPrint.reset()

    # Get count of joysticks.
    joystick_count = pygame.joystick.get_count()

    textPrint.tprint(screen, "Number of joysticks: {}".format(joystick_count))
    textPrint.indent()

    # For each joystick:
    for i in range(joystick_count):
        joystick = pygame.joystick.Joystick(i)
        joystick.init()


        # Usually axis run in pairs, up/down for one, and left/right for
        # the other.
        axes = joystick.get_numaxes()
        textPrint.tprint(screen, "Number of axes: {}".format(axes))
        textPrint.indent()

        for i in range(axes):
            axis = joystick.get_axis(i)
            textPrint.tprint(screen, "Axis {} value: {:>6.1f}".format(i, axis))
           # val = write_read(axis)
        textPrint.unindent()

        buttons = joystick.get_numbuttons()
        textPrint.tprint(screen, "Number of buttons: {}".format(buttons))
        textPrint.indent()

        for i in range(buttons):
            button = joystick.get_button(i)
            textPrint.tprint(screen,
                             "Button {:>2} value: {}".format(i, button))
        textPrint.unindent()

        hats = joystick.get_numhats()
        textPrint.tprint(screen, "Number of hats: {}".format(hats))
        textPrint.indent()

        # Hat position. All or nothing for direction, not a float like
        # get_axis(). Position is a tuple of int values (x, y).
        for i in range(hats):
            hat = joystick.get_hat(i)
            textPrint.tprint(screen, "Hat {} value: {}".format(i, str(hat)))
        textPrint.unindent()

        textPrint.unindent()
        if joystick.get_axis(1) < -0.1:
            # send 1 forward
            print("forward")
            textPrint.tprint(screen, "joystick: {}".format("moves forward"))
            time.sleep(0.1)
            ser.write(b'1')
        if joystick.get_axis(1) > 0.0:
            # send 2 backward
            print("backward")
            textPrint.tprint(screen, "joystick: {}".format("moves backward"))
            time.sleep(0.1)
            ser.write(b'2')
        if joystick.get_axis(0) > 0.0:
            # send 3 right
            print("right")
            textPrint.tprint(screen, "joystick: {}".format("moves right"))
            time.sleep(0.1)
            ser.write(b'3')
        if joystick.get_axis(0) < -0.1:
            # send 4 left
            print("left")
            textPrint.tprint(screen, "joystick: {}".format("moves left"))
            time.sleep(0.1)
            ser.write(b'4')
        if joystick.get_button(5):  # 6
            # send 5 up
            print("up")
            textPrint.tprint(screen, "Button number 6 pushed : {}".format("moves up"))
            time.sleep(0.1)
            ser.write(b'5')
        if joystick.get_button(3):  # 4
            # send 6 down
            print("down")
            textPrint.tprint(screen, "Button number 4 pushed : {}".format("moves down"))
            time.sleep(0.1)
            ser.write(b'6')
        if joystick.get_button(4):  # 5
            # send 5 to stop vertical
            print("stop vertical")
            textPrint.tprint(screen, "Button number 5 pushed : {}".format("stop"))
            time.sleep(0.1)
            ser.write(b'7')
        if joystick.get_button(2):  # 3
            # send 3 to stop horz
            print("stop horizontal")
            textPrint.tprint(screen, "Button number 3 pushed : {}".format("stop"))
            time.sleep(0.1)
            ser.write(b'8')
        if joystick.get_button(1):  # 2
            # send 0 to stop all
            print("stop all")
            textPrint.tprint(screen, "Button number 2 pushed : {}".format("stop"))
            time.sleep(0.1)
            ser.write(b'0')
    #
    # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT
    #

    # Go ahead and update the screen with what we've drawn.
    pygame.display.flip()

    # Limit to 20 frames per second.
    clock.tick(20)
# Close the window and quit.
# If you forget this line, the program will 'hang'
# on exit if running from IDLE.
pygame.quit()

time.sleep(2) # wait for the serial connection to initialize